{
  "name": "Petergate",
  "tagline": "Easy to use and read action and content based authorizations.",
  "body": "# Petergate\r\n\r\n[![Build Status](https://travis-ci.org/isaacsloan/petergate.svg)](https://travis-ci.org/isaacsloan/petergate)\r\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/isaacsloan/petergate?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![Gem Version](https://badge.fury.io/rb/petergate.svg)](http://badge.fury.io/rb/petergate)\r\n\r\n\r\n\r\n> If you like the straight forward and effective nature of [Strong Parameters](https://github.com/rails/strong_parameters) and suspect that [cancan](https://github.com/ryanb/cancan) might be overkill for your project then you'll love [Petergate's](https://github.com/isaacsloan/petergate) easy to use and read action and content based authorizations.\"\r\n>\r\n> -- <cite>1 Peter 3:41</cite>\r\n\r\nInstallation\r\n------\r\n#####Get Gem\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'petergate'\r\n\r\nAnd then execute:\r\n\r\n    bundle\r\n\r\nOr install it yourself as:\r\n\r\n    gem install petergate\r\n#####Prerequisites: Setup Authentication (Devise)\r\n\r\nMake sure your user model is defined in\r\n    app/models/user.rb\r\nand called User.\r\n\r\nIf you're using [devise](https://github.com/plataformatec/devise) you're in luck, otherwise you'll have to add following methods to your project:\r\n\r\n    user_signed_in?\r\n    current_user\r\n    after_sign_in_path_for(current_user)\r\n    authenticate_user!\r\n\r\n#####Run the generators\r\n\r\n    rails g petergate:install\r\n    rake db:migrate\r\n    \r\nThis will add a migration and insert petergate into your User model. \r\n    \r\nUsage\r\n------\r\n#####User Model\r\n\r\nConfigure available roles by modifying this block at the top of your user.rb.\r\n\r\n```ruby\r\n############################################################################################\r\n## PeterGate Roles                                                                        ##\r\n## The :user role is added by default and shouldn't be included in this list.             ##\r\n## The :root_admin can access any page regardless of access settings. Use with caution!   ##\r\n## The multiple option can be set to true if you need users to have multiple roles.       ##\r\npetergate(roles: [:admin, :editor], multiple: false)                                      ##\r\n############################################################################################ \r\n```\r\n\r\nInstance methods added to your User model include: `role, roles, roles=, available_roles`\r\n\r\n#####Controllers\r\n \r\nSetup permissions in your controllers the same as you would for a before filter like so:\r\n\r\n```ruby\r\naccess all: [:show, :index], user: {except: [:destroy]}, company_admin: :all\r\n\r\n# one other option that might seem a bit weird is to put a group of roles in an array:\r\naccess [:all, :user] => [:show, :index]\r\n```\r\n\r\nInside your views you can use logged_in?(:admin, :customer, :etc) to show or hide content.\r\n\r\n```erb\r\n<%= link_to \"destroy\", destroy_listing_path(listing) if logged_in?(:admin, :customer, :etc) %>\r\n```\r\n\r\nIf you need to access available roles within your project you can by calling:\r\n\r\n```ruby\r\nUser::ROLES\r\n# or from an instance\r\nUser.first.available_roles\r\n# ROLES is a CONSTANT and will still work from within the User model instance methods\r\n# like in this default setter:\r\n\r\ndef roles=(v)\r\n  self[:roles] = v.map(&:to_sym).to_a.select{|r| r.size > 0 && ROLES.include?(r)}\r\nend\r\n```\r\n\r\nIf you want to change the `permission denied` message you can add to the access line:\r\n\r\n```ruby\r\naccess user: [:show, :index], message: \"You shall not pass\"\r\n```\r\n\r\nCredits\r\n-------\r\n\r\nPeterGate is written and maintaned by Isaac Sloan and friends.\r\n\r\nCurrently funded and maintained by [RingSeven](http://ringseven.com)\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it ( https://github.com/isaacsloan/petergate/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}